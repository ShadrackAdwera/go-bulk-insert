// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: ecde_cases.sql

package db

import (
	"context"
)

const createCase = `-- name: CreateCase :one
INSERT INTO ecde_cases (date_rep,day,month,year,cases,deaths,countries_and_territories,geo_id,country_territory_code,continent_exp,load_date, iso_country)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) RETURNING id, date_rep, day, month, year, cases, deaths, countries_and_territories, geo_id, country_territory_code, continent_exp, load_date, iso_country
`

type CreateCaseParams struct {
	DateRep                 string `json:"date_rep"`
	Day                     int32  `json:"day"`
	Month                   int32  `json:"month"`
	Year                    int32  `json:"year"`
	Cases                   int64  `json:"cases"`
	Deaths                  int64  `json:"deaths"`
	CountriesAndTerritories string `json:"countries_and_territories"`
	GeoID                   string `json:"geo_id"`
	CountryTerritoryCode    string `json:"country_territory_code"`
	ContinentExp            string `json:"continent_exp"`
	LoadDate                string `json:"load_date"`
	IsoCountry              string `json:"iso_country"`
}

func (q *Queries) CreateCase(ctx context.Context, arg CreateCaseParams) (EcdeCase, error) {
	row := q.db.QueryRowContext(ctx, createCase,
		arg.DateRep,
		arg.Day,
		arg.Month,
		arg.Year,
		arg.Cases,
		arg.Deaths,
		arg.CountriesAndTerritories,
		arg.GeoID,
		arg.CountryTerritoryCode,
		arg.ContinentExp,
		arg.LoadDate,
		arg.IsoCountry,
	)
	var i EcdeCase
	err := row.Scan(
		&i.ID,
		&i.DateRep,
		&i.Day,
		&i.Month,
		&i.Year,
		&i.Cases,
		&i.Deaths,
		&i.CountriesAndTerritories,
		&i.GeoID,
		&i.CountryTerritoryCode,
		&i.ContinentExp,
		&i.LoadDate,
		&i.IsoCountry,
	)
	return i, err
}

const getCase = `-- name: GetCase :one
SELECT id, date_rep, day, month, year, cases, deaths, countries_and_territories, geo_id, country_territory_code, continent_exp, load_date, iso_country FROM ecde_cases
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCase(ctx context.Context, id int64) (EcdeCase, error) {
	row := q.db.QueryRowContext(ctx, getCase, id)
	var i EcdeCase
	err := row.Scan(
		&i.ID,
		&i.DateRep,
		&i.Day,
		&i.Month,
		&i.Year,
		&i.Cases,
		&i.Deaths,
		&i.CountriesAndTerritories,
		&i.GeoID,
		&i.CountryTerritoryCode,
		&i.ContinentExp,
		&i.LoadDate,
		&i.IsoCountry,
	)
	return i, err
}

const listCases = `-- name: ListCases :many
SELECT id, date_rep, day, month, year, cases, deaths, countries_and_territories, geo_id, country_territory_code, continent_exp, load_date, iso_country FROM ecde_cases
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCasesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCases(ctx context.Context, arg ListCasesParams) ([]EcdeCase, error) {
	rows, err := q.db.QueryContext(ctx, listCases, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EcdeCase
	for rows.Next() {
		var i EcdeCase
		if err := rows.Scan(
			&i.ID,
			&i.DateRep,
			&i.Day,
			&i.Month,
			&i.Year,
			&i.Cases,
			&i.Deaths,
			&i.CountriesAndTerritories,
			&i.GeoID,
			&i.CountryTerritoryCode,
			&i.ContinentExp,
			&i.LoadDate,
			&i.IsoCountry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
